fullnameOverride: "promstack"
cleanPrometheusOperatorObjectNames: true
grafana:
  namespaceOverride: grafana
  defaultDashboardsEnabled: false
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: minikube-ca
    hosts: [grafana.test]
    tls: [{hosts: [grafana.test], secretName: grafana-cert}]
  sidecar:
    dashboards: {enabled: false}
    datasources: 
      enabled: true
      defaultDatasourceEnabled: false

  # Grafana Provisioning docs:
  # https://grafana.com/docs/grafana/latest/administration/provisioning/
  additionalDataSources:
  - name: Tempo
    uid: tempo
    type: tempo
    url: http://tempo.grafana:3100
    jsonData:
      tracesToLogsV2:
        datasourceUid: 'loki'
        spanStartTimeShift: '1h'
        spanEndTimeShift: '-1h'
        tags: [{key: "service_name", value: "service_name"}]
        customQuery: true
        query: '{$${__tags}} |= `"traceid":"$${__trace.traceId}"` | json'
      tracesToMetrics:
        datasourceUid: prometheus
        queries:
        - name: 95% Latency
          query: >
            histogram_quantile(0.95, sum(rate(latency_bucket{$$__tags}[$$__rate_interval])) by (le, operation))
        - name: RPS
          query: sum(rate(latency_count{$$__tags}[$$__rate_interval])) by (operation)
        spanEndTimeShift: -1h
        spanStartTimeShift: 1h
        tags:
        - key: service.name
          value: service_name
        - key: span.name
          value: operation
      serviceMap:
        datasourceUid: 'prometheus'
      lokiSearch:
        datasourceUid: 'loki'
      nodeGraph:
        enabled: true
  - name: Loki
    uid: loki
    type: loki
    url: http://loki.grafana:3100
    jsonData:
      derivedFields:
        - datasourceUid: tempo
          matcherRegex: '"traceid":"(\w+)"'
          name: TraceID
          url: '$${__value.raw}'
  - name: Prometheus
    uid: prometheus
    type: prometheus
    url: http://promstack-prometheus.prometheus:9090
    jsonData:
      prometheusType: Prometheus
      exemplarTraceIdDestinations:
        - datasourceUid: tempo
          name: trace_id
prometheus:
  prometheusSpec:
    enableRemoteWriteReceiver: true
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          resources:
            requests:
              storage: 10Gi
    additionalArgs:
      - name: enable-feature
        value: exemplar-storage

prometheus-node-exporter:
  namespaceOverride: kube-system
